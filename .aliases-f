export AV_LOG_FORCE_NOCOLOR=1

fa='-c:a aac -b:a 128k'
fv='-c:v libx264 -level 4.1 -preset veryslow'

bp () { mediainfo "$1" | sed -n "s/^Bits.*: //p"; }
fb () { fs "$1"; echo; ec -; r=23; while true; do o=ff-$r.mp4; fm -n -i ff-fs.mp4 $2 $fv -crf $r $o || break; echo; ec -; b=$(ca "int(round($(bp $o)*1000))"); [ $b -gt 55 ] && let r++ || let r--; [ $r -gt 27 -o $r -lt 19 ] && break; done; for i in ff-*; do echo "$i $(bp $i)"; done | ma ffmpeg $ma; read -p '? ' r; fm -i "$1" $3 $2 $fv -crf $r -ac 2 $fa -sn -map_metadata -1 ff.mp4; ms ffmpeg; }
fd () { fv duration "$1"; echo ${format_duration%.*}; }
fm () { ffmpeg -hide_banner "$@"; }
fn () { fm -ss ${2:-600} -i "$1" -frames:v 1 ff.png; }
fp () { ffprobe -hide_banner "$@"; }
fs () { for i in $(seq 60 60 $(fd "$1")); do fm -v error -ss $i -i "$1" -t 6 -c copy -an -f mpegts -; done | fm -i - -c copy ff-fs.mp4; }
ft () { while read a b; do fm -v error -nostdin -ss $a -i "$1" ${b:+-to $b} -copyts ${@:4} -f mpegts -; done < "$3" | fm -i - -c copy "$2"; }
fv () { eval $(ffprobe -v error -show_chapters -show_format -show_streams -of 'flat=h=0:s=_' "$2" | grep $1); }
h7 () { fv ^stream_0 "$1"; r=$(ca "$stream_0_width/$stream_0_height"); echo 1280x$(ca "round(1280/$r/2)*2"); echo $(ca "round(720*$r/2)*2")x720; }
mm () { mediainfo "$1" | sed '/^Complete name/d; s/ \+:/:/' | head -n -2; }
sc () { unset $(compgen -v | grep ^chapter); fv chapter "$1"; i=0; while true; do s=chapter_${i}_start_time; e=chapter_${i}_end_time; t=chapter_${i}_tags_title; [ ${!s} ] || break; fm -nostdin -i "$1" -c copy -map_chapters -1 -metadata title="${!t}" ${@:2} -ss ${!s} -to ${!e} "${!t}.${1##*.}" || read; let i++; done; }
st () { for i in $(seq $1); do fm -v error -ss $(($i*$2)) -i $3 -frames 1 -f image2 -; done | fm -i - -vf "tile=1x$1" -q:v 1 $4; }

# vim: filetype=sh
